
keycloak
docker run -p 8002:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:23.0.6 start-dev
1. realm --> inventory-service
2. client --> dashboard-inventory
3. users  --> mhrimch, imran + credentials
4. real roles --> ADMIN, USER
5. Role Mapping

---------------------Authentication with username & password to get Access Token From Keycloak------------------------------
http://localhost:8002/realms/inventory-service/protocol/openid-connect/token
headers: Accepted: application/json
         Content-Type: application/x-www-form-urlencoded
body: grant_type=password&client_id=dashboard-inventory&username=mhrimch&password=123456
Access Token default only 5 min 300s

---------------------Authentication to get Refresh Token From Keycloak------------------------------

http://localhost:8002/realms/inventory-service/protocol/openid-connect/token
headers: Accepted: application/json
         Content-Type: application/x-www-form-urlencoded
body: grant_type=prefresh_token&client_id=dashboard-inventory&refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI0YjExYjg4Yi1iNGY2LTQ5ZTYtYjA4Yi0xYjI2YzZkMDMyNjIifQ.eyJleHAiOjE3MDc0NzkwNDcsImlhdCI6MTcwNzQ3NzI0NywianRpIjoiYTIwZWVjMDgtZDc1Yy00ZDk2LThmZWItYjI5ZTA1NTJlNzI5IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDAyL3JlYWxtcy9pbnZlbnRvcnktc2VydmljZSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMi9yZWFsbXMvaW52ZW50b3J5LXNlcnZpY2UiLCJzdWIiOiIyNDM0YTAzYS00ODczLTQ1YTYtOGNhYS02Y2E2NzlhZGIyMzAiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoiZGFzaGJvYXJkLWludmVudG9yeSIsInNlc3Npb25fc3RhdGUiOiIxOGFjYjhkNS1kOTA4LTQ2OTItYTkxZi1iNDJmOWMyMWU5YWEiLCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJzaWQiOiIxOGFjYjhkNS1kOTA4LTQ2OTItYTkxZi1iNDJmOWMyMWU5YWEifQ.iP1bXUoYgl6om5-V3_BVLu2l32sNjCTSmRjxfpLTChE

1800s = 15 min configurable via keycloak

---------------------Authentication with Client secret to get access Token from Keycloak------------------------------


es muss erstmal aktiviert werden
Clients --> dashboard-inventory --> Settings --> Client authentication On + Service accounts Roles
                                --> Credentials --> Client Secret

wenn diese Option aktiviert wird, dann die 2 anderen Optionen werden deaktiviert

http://localhost:8002/realms/inventory-service/protocol/openid-connect/token
headers: Accepted: application/json
         Content-Type: application/x-www-form-urlencoded
grant_type=client_credentials&client_id=dashboard-inventory&client_secret=bTrvRSi81GeXYBzA4SIbMtd9KzvuReLd

---------------------to verify jw token header.payload.signatur ------------------------------
https://jwt.io/#debugger-io

-------------------------------------------------

1. Backeend is secured with jwt --> authentication with beaerer + token --> token (header.payload.signatur) signatur with pub key
        .oauth2ResourceServer(o2rs -> o2rs.jwt(Customizer.withDefaults()))
2. Backend needs pub key
   how creates jwt --> spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8002/realms/inventory-service
   pub key for inventory-service  --> spring.security.oauth2.resourceserver.jwt.jwk-set-uir=http://localhost:8002/realms/inventory-service/protocol/openid-connect/certs


--------------summery to protect microservice in backend-------------------
<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
</dependency>


 @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
        return httpSecurity
                .csrf(csrf->csrf.disable()).headers(h->h.frameOptions(fo->fo.disable()))
                .cors(Customizer.withDefaults())
                .authorizeHttpRequests(ar -> ar.requestMatchers( "/swagger-ui.html", "/swagger-ui/**", "/v3/**", "/h2-console/**").permitAll())
               //.authorizeHttpRequests(ar -> ar.requestMatchers("/api/v1/products").hasAnyAuthority("ADMIN"))
                .authorizeHttpRequests(ar->ar.anyRequest().authenticated())
                .oauth2ResourceServer(o2rs -> o2rs.jwt(jwt->jwt.jwtAuthenticationConverter(jwtAuthConverter)))
                .build();
    }


    public class JwtAuthConverter implements Converter <Jwt , AbstractAuthenticationToken> {

        private final JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();

        @Override
        public AbstractAuthenticationToken convert (Jwt jwt) {

            Collection<GrantedAuthority> authorities = Stream.concat(
                    jwtGrantedAuthoritiesConverter.convert(jwt).stream(),
                    extractResourceRoles(jwt).stream()
            ).collect(Collectors.toSet());
            return new JwtAuthenticationToken(jwt, authorities, jwt.getClaim("preferred_username"));
        }


        private Collection<GrantedAuthority> extractResourceRoles(Jwt jwt) {
            Map<String, Object> realmAccess;
            Collection<String> roles;
            if(jwt.getClaim("realm_access") == null){
                return Set.of();
            }
            realmAccess = jwt.getClaim("realm_access");
            System.out.println("realm_access: "+ realmAccess.toString());
            roles = (Collection<String>) realmAccess.get("roles");
            System.out.println("roles "+ roles.stream().map(role -> new SimpleGrantedAuthority(role)).collect(Collectors.toSet()).toString());
            return roles.stream().map(role -> new SimpleGrantedAuthority(role)).collect(Collectors.toSet());
        }
----------------------how to secure frontend------------------------------------------
1. With Backend Channel **without Authentication Form of Keycloak with openid**
2. With Frontend Channel with Keycloak with Autehtication Form of Keycloak with Oauth2
   --> redirct to keycloak
   --> with keycloak adapter

